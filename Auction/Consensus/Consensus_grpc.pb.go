// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.3
// source: Consensus.proto

package Consensus

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConsensusClient is the client API for Consensus service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConsensusClient interface {
	Sync(ctx context.Context, opts ...grpc.CallOption) (Consensus_SyncClient, error)
}

type consensusClient struct {
	cc grpc.ClientConnInterface
}

func NewConsensusClient(cc grpc.ClientConnInterface) ConsensusClient {
	return &consensusClient{cc}
}

func (c *consensusClient) Sync(ctx context.Context, opts ...grpc.CallOption) (Consensus_SyncClient, error) {
	stream, err := c.cc.NewStream(ctx, &Consensus_ServiceDesc.Streams[0], "/Consensus.Consensus/Sync", opts...)
	if err != nil {
		return nil, err
	}
	x := &consensusSyncClient{stream}
	return x, nil
}

type Consensus_SyncClient interface {
	Send(*ClientBid) error
	CloseAndRecv() (*Ack, error)
	grpc.ClientStream
}

type consensusSyncClient struct {
	grpc.ClientStream
}

func (x *consensusSyncClient) Send(m *ClientBid) error {
	return x.ClientStream.SendMsg(m)
}

func (x *consensusSyncClient) CloseAndRecv() (*Ack, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Ack)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ConsensusServer is the server API for Consensus service.
// All implementations must embed UnimplementedConsensusServer
// for forward compatibility
type ConsensusServer interface {
	Sync(Consensus_SyncServer) error
	mustEmbedUnimplementedConsensusServer()
}

// UnimplementedConsensusServer must be embedded to have forward compatible implementations.
type UnimplementedConsensusServer struct {
}

func (UnimplementedConsensusServer) Sync(Consensus_SyncServer) error {
	return status.Errorf(codes.Unimplemented, "method Sync not implemented")
}
func (UnimplementedConsensusServer) mustEmbedUnimplementedConsensusServer() {}

// UnsafeConsensusServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConsensusServer will
// result in compilation errors.
type UnsafeConsensusServer interface {
	mustEmbedUnimplementedConsensusServer()
}

func RegisterConsensusServer(s grpc.ServiceRegistrar, srv ConsensusServer) {
	s.RegisterService(&Consensus_ServiceDesc, srv)
}

func _Consensus_Sync_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ConsensusServer).Sync(&consensusSyncServer{stream})
}

type Consensus_SyncServer interface {
	SendAndClose(*Ack) error
	Recv() (*ClientBid, error)
	grpc.ServerStream
}

type consensusSyncServer struct {
	grpc.ServerStream
}

func (x *consensusSyncServer) SendAndClose(m *Ack) error {
	return x.ServerStream.SendMsg(m)
}

func (x *consensusSyncServer) Recv() (*ClientBid, error) {
	m := new(ClientBid)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Consensus_ServiceDesc is the grpc.ServiceDesc for Consensus service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Consensus_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Consensus.Consensus",
	HandlerType: (*ConsensusServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Sync",
			Handler:       _Consensus_Sync_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "Consensus.proto",
}
